// Code generated by MockGen. DO NOT EDIT.
// Source: db_cp_6/internal/repo (interfaces: AdminRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "db_cp_6/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminRepo is a mock of AdminRepo interface.
type MockAdminRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepoMockRecorder
}

// MockAdminRepoMockRecorder is the mock recorder for MockAdminRepo.
type MockAdminRepoMockRecorder struct {
	mock *MockAdminRepo
}

// NewMockAdminRepo creates a new mock instance.
func NewMockAdminRepo(ctrl *gomock.Controller) *MockAdminRepo {
	mock := &MockAdminRepo{ctrl: ctrl}
	mock.recorder = &MockAdminRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepo) EXPECT() *MockAdminRepoMockRecorder {
	return m.recorder
}

// CreateAdmin mocks base method.
func (m *MockAdminRepo) CreateAdmin(arg0 context.Context, arg1 interface{}, arg2 *entity.Admin) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminRepoMockRecorder) CreateAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminRepo)(nil).CreateAdmin), arg0, arg1, arg2)
}

// DeleteAdmin mocks base method.
func (m *MockAdminRepo) DeleteAdmin(arg0 context.Context, arg1 interface{}, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAdmin indicates an expected call of DeleteAdmin.
func (mr *MockAdminRepoMockRecorder) DeleteAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAdmin", reflect.TypeOf((*MockAdminRepo)(nil).DeleteAdmin), arg0, arg1, arg2)
}

// GetAdminByLogin mocks base method.
func (m *MockAdminRepo) GetAdminByLogin(arg0 context.Context, arg1 interface{}, arg2 string) (*entity.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdminByLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdminByLogin indicates an expected call of GetAdminByLogin.
func (mr *MockAdminRepoMockRecorder) GetAdminByLogin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdminByLogin", reflect.TypeOf((*MockAdminRepo)(nil).GetAdminByLogin), arg0, arg1, arg2)
}

// GetAllAdmins mocks base method.
func (m *MockAdminRepo) GetAllAdmins(arg0 context.Context, arg1 interface{}) (entity.Admins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllAdmins", arg0, arg1)
	ret0, _ := ret[0].(entity.Admins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllAdmins indicates an expected call of GetAllAdmins.
func (mr *MockAdminRepoMockRecorder) GetAllAdmins(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllAdmins", reflect.TypeOf((*MockAdminRepo)(nil).GetAllAdmins), arg0, arg1)
}
