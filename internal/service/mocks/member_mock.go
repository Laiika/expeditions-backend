// Code generated by MockGen. DO NOT EDIT.
// Source: db_cp_6/internal/repo (interfaces: MemberRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	entity "db_cp_6/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMemberRepo is a mock of MemberRepo interface.
type MockMemberRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMemberRepoMockRecorder
}

// MockMemberRepoMockRecorder is the mock recorder for MockMemberRepo.
type MockMemberRepoMockRecorder struct {
	mock *MockMemberRepo
}

// NewMockMemberRepo creates a new mock instance.
func NewMockMemberRepo(ctrl *gomock.Controller) *MockMemberRepo {
	mock := &MockMemberRepo{ctrl: ctrl}
	mock.recorder = &MockMemberRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMemberRepo) EXPECT() *MockMemberRepoMockRecorder {
	return m.recorder
}

// CreateMember mocks base method.
func (m *MockMemberRepo) CreateMember(arg0 context.Context, arg1 interface{}, arg2 *entity.Member) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMember indicates an expected call of CreateMember.
func (mr *MockMemberRepoMockRecorder) CreateMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMember", reflect.TypeOf((*MockMemberRepo)(nil).CreateMember), arg0, arg1, arg2)
}

// CreateMemberExpedition mocks base method.
func (m *MockMemberRepo) CreateMemberExpedition(arg0 context.Context, arg1 interface{}, arg2, arg3 int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMemberExpedition", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMemberExpedition indicates an expected call of CreateMemberExpedition.
func (mr *MockMemberRepoMockRecorder) CreateMemberExpedition(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMemberExpedition", reflect.TypeOf((*MockMemberRepo)(nil).CreateMemberExpedition), arg0, arg1, arg2, arg3)
}

// DeleteMember mocks base method.
func (m *MockMemberRepo) DeleteMember(arg0 context.Context, arg1 interface{}, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMember", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMember indicates an expected call of DeleteMember.
func (mr *MockMemberRepoMockRecorder) DeleteMember(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMember", reflect.TypeOf((*MockMemberRepo)(nil).DeleteMember), arg0, arg1, arg2)
}

// GetAllMembers mocks base method.
func (m *MockMemberRepo) GetAllMembers(arg0 context.Context, arg1 interface{}) (entity.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMembers", arg0, arg1)
	ret0, _ := ret[0].(entity.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMembers indicates an expected call of GetAllMembers.
func (mr *MockMemberRepoMockRecorder) GetAllMembers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMembers", reflect.TypeOf((*MockMemberRepo)(nil).GetAllMembers), arg0, arg1)
}

// GetExpeditionMembers mocks base method.
func (m *MockMemberRepo) GetExpeditionMembers(arg0 context.Context, arg1 interface{}, arg2 int) (entity.Members, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpeditionMembers", arg0, arg1, arg2)
	ret0, _ := ret[0].(entity.Members)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExpeditionMembers indicates an expected call of GetExpeditionMembers.
func (mr *MockMemberRepoMockRecorder) GetExpeditionMembers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpeditionMembers", reflect.TypeOf((*MockMemberRepo)(nil).GetExpeditionMembers), arg0, arg1, arg2)
}

// GetMemberByLogin mocks base method.
func (m *MockMemberRepo) GetMemberByLogin(arg0 context.Context, arg1 interface{}, arg2 string) (*entity.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberByLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberByLogin indicates an expected call of GetMemberByLogin.
func (mr *MockMemberRepoMockRecorder) GetMemberByLogin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberByLogin", reflect.TypeOf((*MockMemberRepo)(nil).GetMemberByLogin), arg0, arg1, arg2)
}
